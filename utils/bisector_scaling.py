def soln_1(p1:list,p2:list,p3:list,d) -> list:
    x1,y1 = p1
    x2,y2 = p2
    x3,y3 = p3
    x = ((x1*y2 - x2*y1)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2) - (x2*y3 - x3*y2)*((x1 - x2)**2 + (y1 - y2)**2)**(1/2))/(((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(y2 - y3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)) + ((((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(x2 - x3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2))*(2*y2 - 2**(1/2)*d*(((x1 - x2)**4*(y2 - y3)**4 + (x2 - x3)**4*(y1 - y2)**4 + 4*(y1 - y2)**4*(y2 - y3)**4 + (x1 - x2)**2*(x2 - x3)**4*(y1 - y2)**2 + (x1 - x2)**4*(x2 - x3)**2*(y2 - y3)**2 + 5*(x1 - x2)**2*(y1 - y2)**2*(y2 - y3)**4 + 5*(x2 - x3)**2*(y1 - y2)**4*(y2 - y3)**2 - 4*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)**3*(y2 - y3)**3 + 6*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)**3*(x2 - x3)**3*(y1 - y2)*(y2 - y3) + 2*(x1 - x2)**3*(x2 - x3)*(y1 - y2)*(y2 - y3)**3 + 2*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**3*(y2 - y3) + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)**3*(y2 - y3)**3 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**2 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**3*(x2 - x3)*(y2 - y3)**2 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(y1 - y2)*(y2 - y3)**3 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x2 - x3)**2*(y1 - y2)**3*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)*(y1 - y2)**2*(y2 - y3)**2)/(((x1 - x2)**2 + (y1 - y2)**2)*((x2 - x3)**2 + (y2 - y3)**2)*(2*(x1 - x2)**2*(x2 - x3)**2 + (x1 - x2)**2*(y2 - y3)**2 + (x2 - x3)**2*(y1 - y2)**2 + 2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)*(y2 - y3))))**(1/2)))/(2*(((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(y2 - y3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)))
    y = y2 - (2**(1/2)*d*(((x1 - x2)**4*(y2 - y3)**4 + (x2 - x3)**4*(y1 - y2)**4 + 4*(y1 - y2)**4*(y2 - y3)**4 + (x1 - x2)**2*(x2 - x3)**4*(y1 - y2)**2 + (x1 - x2)**4*(x2 - x3)**2*(y2 - y3)**2 + 5*(x1 - x2)**2*(y1 - y2)**2*(y2 - y3)**4 + 5*(x2 - x3)**2*(y1 - y2)**4*(y2 - y3)**2 - 4*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)**3*(y2 - y3)**3 + 6*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)**3*(x2 - x3)**3*(y1 - y2)*(y2 - y3) + 2*(x1 - x2)**3*(x2 - x3)*(y1 - y2)*(y2 - y3)**3 + 2*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**3*(y2 - y3) + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)**3*(y2 - y3)**3 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**2 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**3*(x2 - x3)*(y2 - y3)**2 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(y1 - y2)*(y2 - y3)**3 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x2 - x3)**2*(y1 - y2)**3*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)*(y1 - y2)**2*(y2 - y3)**2)/(((x1 - x2)**2 + (y1 - y2)**2)*((x2 - x3)**2 + (y2 - y3)**2)*(2*(x1 - x2)**2*(x2 - x3)**2 + (x1 - x2)**2*(y2 - y3)**2 + (x2 - x3)**2*(y1 - y2)**2 + 2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)*(y2 - y3))))**(1/2))/2
    return [x,y]
def soln_2(p1:list,p2:list,p3:list,d) -> list:
    x1,y1 = p1
    x2,y2 = p2
    x3,y3 = p3
    x = ((x1*y2 - x2*y1)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2) - (x2*y3 - x3*y2)*((x1 - x2)**2 + (y1 - y2)**2)**(1/2))/(((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(y2 - y3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)) + ((((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(x2 - x3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2))*(2*y2 + 2**(1/2)*d*(((x1 - x2)**4*(y2 - y3)**4 + (x2 - x3)**4*(y1 - y2)**4 + 4*(y1 - y2)**4*(y2 - y3)**4 + (x1 - x2)**2*(x2 - x3)**4*(y1 - y2)**2 + (x1 - x2)**4*(x2 - x3)**2*(y2 - y3)**2 + 5*(x1 - x2)**2*(y1 - y2)**2*(y2 - y3)**4 + 5*(x2 - x3)**2*(y1 - y2)**4*(y2 - y3)**2 - 4*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)**3*(y2 - y3)**3 + 6*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)**3*(x2 - x3)**3*(y1 - y2)*(y2 - y3) + 2*(x1 - x2)**3*(x2 - x3)*(y1 - y2)*(y2 - y3)**3 + 2*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**3*(y2 - y3) + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)**3*(y2 - y3)**3 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**2 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**3*(x2 - x3)*(y2 - y3)**2 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(y1 - y2)*(y2 - y3)**3 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x2 - x3)**2*(y1 - y2)**3*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)*(y1 - y2)**2*(y2 - y3)**2)/(((x1 - x2)**2 + (y1 - y2)**2)*((x2 - x3)**2 + (y2 - y3)**2)*(2*(x1 - x2)**2*(x2 - x3)**2 + (x1 - x2)**2*(y2 - y3)**2 + (x2 - x3)**2*(y1 - y2)**2 + 2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)*(y2 - y3))))**(1/2)))/(2*(((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*(y2 - y3) - ((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)))
    y = y2 + (2**(1/2)*d*(((x1 - x2)**4*(y2 - y3)**4 + (x2 - x3)**4*(y1 - y2)**4 + 4*(y1 - y2)**4*(y2 - y3)**4 + (x1 - x2)**2*(x2 - x3)**4*(y1 - y2)**2 + (x1 - x2)**4*(x2 - x3)**2*(y2 - y3)**2 + 5*(x1 - x2)**2*(y1 - y2)**2*(y2 - y3)**4 + 5*(x2 - x3)**2*(y1 - y2)**4*(y2 - y3)**2 - 4*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)**3*(y2 - y3)**3 + 6*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)**3*(x2 - x3)**3*(y1 - y2)*(y2 - y3) + 2*(x1 - x2)**3*(x2 - x3)*(y1 - y2)*(y2 - y3)**3 + 2*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**3*(y2 - y3) + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)**3*(y2 - y3)**3 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)**3*(y1 - y2)**2 - ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**3*(x2 - x3)*(y2 - y3)**2 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(y1 - y2)*(y2 - y3)**3 - 3*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x2 - x3)**2*(y1 - y2)**3*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)**2*(x2 - x3)**2*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3)*(y1 - y2)**2*(y2 - y3)**2)/(((x1 - x2)**2 + (y1 - y2)**2)*((x2 - x3)**2 + (y2 - y3)**2)*(2*(x1 - x2)**2*(x2 - x3)**2 + (x1 - x2)**2*(y2 - y3)**2 + (x2 - x3)**2*(y1 - y2)**2 + 2*(y1 - y2)**2*(y2 - y3)**2 + 2*(x1 - x2)*(x2 - x3)*(y1 - y2)*(y2 - y3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(x1 - x2)*(x2 - x3) - 2*((x1 - x2)**2 + (y1 - y2)**2)**(1/2)*((x2 - x3)**2 + (y2 - y3)**2)**(1/2)*(y1 - y2)*(y2 - y3))))**(1/2))/2
    return [x,y]

def closer(point1:list,point2:list, target:list) -> list:
    """
    takes in two points and then a target, all as (x,y) tuples. Returns the point closer to the target. 
    If neither is closer (it's a 180 degree angle, or a line), returns false
    """
    pythagorean = lambda a,b: ((a[0]-b[0])**2+(a[1]-b[1])**2)**(1/2)
    d1 = pythagorean(point1,target)
    d2 = pythagorean(point2,target)
    if d1 < d2:
        return point1
    elif d2 < d1:
        return point2
    else: 
        False

def scale(p1: list, p2: list, p3: list, distance) -> list:
    """
    Takes three points and a distance, returns a point along interior bisector with given distance from vertex.
    """
    opt_1 = soln_1(p1,p2,p3,distance)
    opt_2 = soln_2(p1,p2,p3,distance)
    result = closer(opt_1,opt_2,p1)
    if result:
        return result
    else: #they have the same value, since they're both NaN
        # try again but switch the endpoints to avoid divide by zero errors
        opt_1 = soln_1(p3,p2,p1,distance)
        opt_2 = soln_2(p3,p2,p1,distance)
        result = closer(opt_1,opt_2,p1)
        if result:
            return result
        else: #if none of the above work, just try to move the point along the x axis
            x1 = p2[0]+distance
            x2 = p2[0]-distance
            y=p2[1]
            result = closer([x1,y],[x2,y],p1)
            if result:
                return result
            else:
                raise Exception("I give up")

if __name__ == "__main__":
    d=0.5
    p1=[2.375, 4.5  ]
    p2=[2.625, 4.   ]
    p3=[2.375, 3.5  ]

    opt_1 = soln_1(p1,p2,p3,d)
    opt_2 = soln_2(p1,p2,p3,d)
    print(closer(opt_1,opt_2,p1)) #output the point closer to point 1, as that is the interior solution.